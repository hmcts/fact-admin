#!groovy

@Library("Infrastructure")

def type = "nodejs"
def product = "fact"
def component = "admin"

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

def secrets = [
  'fact-${env}': [
    secret("oauth-client-secret", "OAUTH_CLIENT_SECRET"),
    secret("oauth-user", "OAUTH_USER"),
    secret("user-lock-timeout", "USER_LOCK_TIMEOUT"),
    secret("oauth-viewer-user", "OAUTH_VIEWER_USER"),
    secret("oauth-test-user-no-role", "OAUTH_TEST_USER_NO_ROLE"),
    secret("oauth-user-password", "OAUTH_USER_PASSWORD"),
    secret("oauth-super-user", "OAUTH_SUPER_USER"),
    secret("launchdarkly-sdk-key", "LAUNCHDARKLY_SDK_KEY")
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

// Prevent Docker hub rate limit errors by ensuring that testcontainers uses images from hmctspublic ACR
env.TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX = 'hmctspublic.azurecr.io/imported/'

withPipeline(type, product, component) {
  env.API_URL = 'http://fact-api-aat.service.core-compute-aat.internal'
  disableLegacyDeployment()
  loadVaultSecrets(secrets)
  syncBranchesWithMaster(['demo', 'perftest', 'ithc'])

  afterSuccess('build') {
    yarnBuilder.yarn('build')
  }
  afterAlways('functionalTest') {
    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "functional-output/functional/allure",
      reportFiles          : "index.html",
      reportName           : "Functional Test Report"
    ]
  }
}
